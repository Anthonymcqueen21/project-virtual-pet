"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[8968],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>m});var s=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,s,r=function(e,a){if(null==e)return{};var t,s,r={},n=Object.keys(e);for(s=0;s<n.length;s++)t=n[s],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)t=n[s],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=s.createContext({}),l=function(e){var a=s.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=l(e.components);return s.createElement(c.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},g=s.forwardRef((function(e,a){var t=e.components,r=e.mdxType,n=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(t),g=r,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||n;return t?s.createElement(m,i(i({ref:a},p),{},{components:t})):s.createElement(m,i({ref:a},p))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=t.length,i=new Array(n);i[0]=g;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<n;l++)i[l]=t[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1639:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>o,toc:()=>l});var s=t(7462),r=(t(7294),t(3905));const n={sidebar_position:4},i="Sequence Diagrams",o={unversionedId:"system-architecture/sequence-diagrams",id:"system-architecture/sequence-diagrams",title:"Sequence Diagrams",description:"Use Case 1",source:"@site/docs/system-architecture/sequence-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/sequence-diagrams",permalink:"/project-virtual-pet/docs/system-architecture/sequence-diagrams",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-virtual-pet/edit/main/documentation/docs/system-architecture/sequence-diagrams.md",tags:[],version:"current",lastUpdatedBy:"jay-newman",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Class Diagrams",permalink:"/project-virtual-pet/docs/system-architecture/class-diagrams"},next:{title:"Algorithms",permalink:"/project-virtual-pet/docs/system-architecture/algorithms"}},c={},l=[{value:"Use Case 1",id:"use-case-1",level:2},{value:"Use Case 2",id:"use-case-2",level:2},{value:"Use Case 3",id:"use-case-3",level:2},{value:"Use Case 4",id:"use-case-4",level:2},{value:"Use Case 5",id:"use-case-5",level:2},{value:"Use Case 6",id:"use-case-6",level:2},{value:"Use Case 7: As a user, I want to be able to log into an account so that my progress and tasks will be saved.",id:"use-case-7-as-a-user-i-want-to-be-able-to-log-into-an-account-so-that-my-progress-and-tasks-will-be-saved",level:2},{value:"Use Case 8",id:"use-case-8",level:2}],p={toc:l};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,r.kt)("h2",{id:"use-case-1"},"Use Case 1"),(0,r.kt)("h2",{id:"use-case-2"},"Use Case 2"),(0,r.kt)("h2",{id:"use-case-3"},"Use Case 3"),(0,r.kt)("h2",{id:"use-case-4"},"Use Case 4"),(0,r.kt)("h2",{id:"use-case-5"},"Use Case 5"),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    title Updating Task Progress\n    actor User as User\n    participant PageDisplay\n    participant TaskPage\n    participant TaskList\n    participant TaskItem\n    participant TaskDetails\n    participant APIMiddleware\n    \n    User->>+TaskItem: User selects a task to view details\n    TaskItem->>TaskDetails: render\n    User->>TaskDetails: User updates progress by indicating they're half-way through\n    TaskDetails->>TaskDetails: updateTask()\n    %% Note over TaskDetails \n    PageDisplay->>APIMiddleware: UPDATE (HTTP) task, inventory\n    APIMiddleware--\x3e>PageDisplay: HTTP 200 Content-Type: JSON[] taskList, JSON[] inventory\n    PageDisplay--\x3e>PageDisplay: rerender\n    PageDisplay->>TaskPage: render\n    TaskPage->>TaskList: render\n    TaskList->>TaskItem: render\n    deactivate TaskItem"}),(0,r.kt)("h2",{id:"use-case-6"},"Use Case 6"),(0,r.kt)("mermaid",{value:"sequenceDiagram\ntitle Tracking Task Progress\n    actor u as User\n    participant Main\n    participant PageDisplay\n    participant PetProfPage\n    participant PPTaskList\n    participant PPTaskItem\n    participant PPTaskDetails\n    participant APIMiddleware\n    Main ->> Main: fetchData()\n    Main ->> APIMiddleware: GET (HTTP) avatarInfo\n    APIMiddleware --\x3e> Main: HTTP 200 Content-Type: JSON avatarInfo\n    Main ->> PageDisplay: render\n    PageDisplay ->> PageDisplay: fetchData\n    PageDisplay ->> APIMiddleware: GET (HTTP) taskList\n    APIMiddleware --\x3e> PageDisplay: HTTP 200 Content-Type: JSON[] taskList\n    u ->>+PetProfPage: User selects 'Pet Profile' page\n    PetProfPage ->>PPTaskList: render\n    PPTaskList ->>PPTaskItem: render\n    u ->>+ PPTaskItem: User selects a specific task under pet profile\n    PPTaskItem ->> PPTaskDetails: render\n    deactivate PetProfPage\n    deactivate PPTaskItem"}),(0,r.kt)("p",null,"This sequence diagram displays the way in which the user can use the Pet Profile page to see more information about their progress, as shown in Use Case 6. By selecting a task under the pet profile page, they can see their current progress towards completing it, as well as the time remaining before the deadline (whether it be a self-set deadline, or one imposed by Canvas)."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The avatar information is retrieved through an API call."),(0,r.kt)("li",{parentName:"ol"},"The page display component is rendered."),(0,r.kt)("li",{parentName:"ol"},"The list of tasks is retrieved through an API call."),(0,r.kt)("li",{parentName:"ol"},"The user selects 'Pet Profile' page, and selects a specific task to see more information."),(0,r.kt)("li",{parentName:"ol"},"The pet profile page renders the task list, task item, and task details components.")),(0,r.kt)("h2",{id:"use-case-7-as-a-user-i-want-to-be-able-to-log-into-an-account-so-that-my-progress-and-tasks-will-be-saved"},"Use Case 7: As a user, I want to be able to log into an account so that my progress and tasks will be saved."),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    actor User\n    participant HomePage\n    participant LoginPage\n    participant APIMiddleware\n\n    User->>+LoginPage: User navigates to the login page and submits their credentials\n    LoginPage->>APIMiddleware: POST (HTTP) username, password\n    APIMiddleware--\x3e>LoginPage: HTTP 200 Content-Type: JSON[] refresh token, access token\n    LoginPage->>LoginPage: Set Auth. Tokens in Local Storage\n    LoginPage->>LoginPage: Set User State in application\n    LoginPage->>-User: User is logged in\n    User->>HomePage: User is redirected to the home page and has access to the applications"}),(0,r.kt)("h2",{id:"use-case-8"},"Use Case 8"))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[8968],{3905:(e,a,t)=>{t.d(a,{Zo:()=>l,kt:()=>P});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),c=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},l=function(e){var a=c(e.components);return n.createElement(p.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=c(t),g=r,P=d["".concat(p,".").concat(g)]||d[g]||u[g]||s;return t?n.createElement(P,i(i({ref:a},l),{},{components:t})):n.createElement(P,i({ref:a},l))}));function P(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=g;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1639:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=t(7462),r=(t(7294),t(3905));const s={sidebar_position:4},i="Sequence Diagrams",o={unversionedId:"system-architecture/sequence-diagrams",id:"system-architecture/sequence-diagrams",title:"Sequence Diagrams",description:"Use Case 1",source:"@site/docs/system-architecture/sequence-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/sequence-diagrams",permalink:"/project-virtual-pet/docs/system-architecture/sequence-diagrams",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-virtual-pet/edit/main/documentation/docs/system-architecture/sequence-diagrams.md",tags:[],version:"current",lastUpdatedBy:"mgclay",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Class Diagrams",permalink:"/project-virtual-pet/docs/system-architecture/class-diagrams"},next:{title:"Database Diagrams",permalink:"/project-virtual-pet/docs/system-architecture/database-diagrams"}},p={},c=[{value:"Use Case 1",id:"use-case-1",level:2},{value:"Use Case 2",id:"use-case-2",level:2},{value:"Use Case 3",id:"use-case-3",level:2},{value:"Use Case 4",id:"use-case-4",level:2},{value:"Use Case 5",id:"use-case-5",level:2},{value:"Use Case 6",id:"use-case-6",level:2},{value:"Use Case 7",id:"use-case-7",level:2},{value:"Use Case 8",id:"use-case-8",level:2}],l={toc:c};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,r.kt)("h2",{id:"use-case-1"},"Use Case 1"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As a user, I want to use the resources I've collected in the application to progress my avatar.")),(0,r.kt)("mermaid",{value:'sequenceDiagram\ntitle Feeding Candies to Progress\n    actor User\n    participant Main\n    participant PageDisplay\n    participant PetProfPage\n    participant InventoryPage\n    participant PetSprite\n    participant ProgressBar\n    participant APIMiddleware\n\n    %%set up pet display \n    activate Main\n    Main ->>+ PetDisplay: fetchData\n    activate PetDisplay\n    PetDisplay ->> APIMiddleware: GET (HTTP) avatarInfo\n    activate APIMiddleware\n    APIMiddleware --\x3e> PetDisplay: HTTP 200 Content-Type: JSON avatarInfo\n    Main ->> PetDisplay: render\n\n    activate User\n    User ->>InventoryPage: User navigates to the "Inventory Page"\n\n    %% set up inventory page display\n    Main ->> InventoryPage: fetchData\n    activate InventoryPage\n    InventoryPage ->> APIMiddleware: GET (HTTP) inventory\n    APIMiddleware --\x3e> InventoryPage: HTTP 200 Content-Type: JSON[] inventory\n    Main ->> Inventory: render\n    InventoryPage ->> Inventory: display candies in inventory\n    \n    %% pick up candies\n    User ->> InventoryPage: User picks up candy from inventory\n    InventoryPage ->> APIMiddleware: PUT (HTTP) inventory \n    APIMiddleware --\x3e> InventoryPage: HTTP 200 success\n    Inventory ->> Inventory: Update inventory to remove candy\n    Main ->> InventoryPage: render\n\n    %% drag/drop\n    User ->> PetSprite: User drags and drops candy on avatar\n    activate PetSprite\n    Main ->> PetDisplay: render\n    PetSprite ->> PetDisplay: trigger eating animation\n    PetDisplay ->> ProgressBar: EXP in avatarInfo increases\n    PetDisplay ->> APIMiddleware: PUT (HTTP) avatarInfo\n    APIMiddleware --\x3e> PetDisplay: HTTP 200 success\n    deactivate PetDisplay\n    Main ->> ProgressBar: render/update\n\n    deactivate Main\n    deactivate User\n    deactivate APIMiddleware\n    deactivate InventoryPage\n    deactivate PetSprite'}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"This sequence diagram displays the way in which the user can feed candies collected from completing tasks to their avatar by dragging and dropping candies\nfrom the Inventory Page to their avatar which is shown in the Pet Display. \n1. The user navigates to the InventoryPage in the PageDisplay portion of the screen on the right. The inventory data is fetched through an API call.\n2. The user views a set of acquired rewards on the InventoryPage in the form of \u2018candies\u2019 which are contained as Items in an ItemGrid in the Inventory.\n3. The user drags a 'candy' to the avatar, and the Inventory is updated to reflect the removal of a candy. An API call updates the inventory list.\n4. The user drops the 'candy' onto their avatar on the lefthand side of the screen, and it shows an eating animation and a satisfied animation.\n5. The avatarInfo is updated which contains the EXP data, which causes the progress bar to update, increasing when the \u2018candy\u2019 is consumed.\n")),(0,r.kt)("h2",{id:"use-case-2"},"Use Case 2"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As a user, I want to link Canvas to my Virtual Pet.")),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    actor User\n    participant App\n    participant Main\n    participant Header\n    participant DropDownMenu\n    participant DropDownItem\n    participant CanvasIntegrationPage\n    participant CanvasAPI\n\n    activate User\n    User ->> DropDownMenu: User clicks to open drop down options\n    activate DropDownMenu \n    DropDownMenu ->> DropDownItem: handleClick to open page\n    activate DropDownItem\n    DropDownItem ->> CanvasIntegrationPage: routes to Canvas Integration\n    activate CanvasIntegrationPage\n    CanvasIntegrationPage ->> User: Prompt user to sign on through SSO \n    User ->> CanvasIntegrationPage: User signs in externally and it is accepted\n    CanvasIntegrationPage ->> CanvasAPI: fetch courses and assignments from user's Canvas account\n    activate CanvasAPI\n    CanvasIntegrationPage ->> App: update userInfo\n    activate App\n\n\n    deactivate User\n    deactivate DropDownMenu \n    deactivate DropDownItem\n    deactivate CanvasIntegrationPage\n    deactivate CanvasAPI\n    deactivate App"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"This sequence diagrams shows how a user can link Canvas to their Virtual Pet Study Buddy. The user will navigate to the \nCanvasIntegrationPage (after creating an account and profile). They will be prompted to sign in with SSO authentication. \nAfter a successful sign-in, the user's data will be updated such that their assignments and courses will be imported into their account.\n\n1. The user creates an account and profile as described in Use Case 8.\n2. The user navigates to the Canvas Integration section of the site.\n3. The user signs on through SSO.\n4. Courses as assignment data are imported into the user's info.\n")),(0,r.kt)("h2",{id:"use-case-3"},"Use Case 3"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As a user, I want to quickly monitor my progress by assessing the mood of my avatar.")),(0,r.kt)("mermaid",{value:"sequenceDiagram\ntitle Check Progress Via Pet Mood\n    actor u as User\n    participant Main\n    participant PetDisplay\n    participant PetSprite\n    participant PageDisplay\n    participant TaskPage\n    participant TaskList\n    participant TaskItem\n    participant TaskDetails\n    participant APIMiddleware\n    Main ->> Main: fetchData()\n    Main ->> APIMiddleware: GET (HTTP) avatarInfo\n    APIMiddleware --\x3e> Main: HTTP 200 Content-Type: JSON avatarInfo\n    Main ->> PetDisplay: render\n    PetDisplay ->> PetSprite: render\n    Main ->> PageDisplay: render\n\n    \n    PageDisplay ->> APIMiddleware: GET (HTTP) taskList\n    APIMiddleware --\x3e> PageDisplay: HTTP 200 Content-Type: JSON[] taskList\n   \n    u ->> Main: User has an assignment due in in 24 hours\n    Main ->> PetDisplay: setAvatarInfo()\n    PetDisplay ->> PetSprite: render\n    PetSprite ->> PetSprite: setSprite(hungry)\n    PetSprite ->> PetSprite: render\n    Main ->> PageDisplay: render\n    PageDisplay ->> APIMiddleware: GET (HTTP) taskList\n    APIMiddleware --\x3e> PageDisplay: HTTP 200 Content-Type: JSON[] taskList\n  \n\n    u ->> Main: User has an assignment that is now past due\n    Main ->> PetDisplay: setAvatarInfo()\n    PetDisplay ->> PetSprite: render\n    PetSprite ->> PetSprite: setSprite(upset)\n    PetSprite ->> PetSprite: render\n    Main ->> PageDisplay: render\n    PageDisplay ->> TaskPage: render\n    TaskPage ->> TaskList: render\n    TaskList ->> TaskItem: render\n    u ->>+ TaskItem: User selects a past due task \n    TaskItem ->>+ TaskDetails: renders\n    deactivate TaskItem\n    u ->>+ TaskDetails: User marks the late task as complete\n    TaskDetails ->> TaskDetails: updateTask()  \n    deactivate TaskDetails\n\n\n\n    PageDisplay->>APIMiddleware: PUT (HTTP) task, inventory\n    APIMiddleware--\x3e>PageDisplay: HTTP 200 Content-Type: JSON[] taskList, JSON[] inventory\n    PageDisplay --\x3e> PageDisplay: rerender components\n    Main ->> PetDisplay: render\n    PetDisplay ->> PetSprite: render\n\n    Main ->> PageDisplay: render"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1. User has set up Canvas integration and has neglected an assignment.\n2. As the assignment gets closer, the avatar becomes visibly hungry in a comically over-the-top-fashion.\n3. When the due date for the assignment passes, the avatar becomes visibly upset.\n4. Experience and rewards gained in the application now have a multiplier that is less than one.\n5. The user can now retroactively complete the assignment and the multiplier will be returned to the previous state.\n6. This will be reflected in the avatar's apparent mood.\n")),(0,r.kt)("h2",{id:"use-case-4"},"Use Case 4"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As a user, I want to create a schedule and be encouraged by my Virtual Pet to adhere to the schedule.")),(0,r.kt)("mermaid",{value:'sequenceDiagram\ntitle Creating a Goal\n    actor u as User\n    participant PageDisplay\n    participant TaskPage\n    participant TaskList\n    participant CreateTaskForm\n    \n    participant APIMiddleware\n    PageDisplay ->> PageDisplay: fetchData\n    PageDisplay ->> APIMiddleware: GET (HTTP) taskList\n    APIMiddleware --\x3e> PageDisplay: HTTP 200 Content-Type: JSON[] taskList\n    PageDisplay ->> TaskPage: render\n    TaskPage ->> TaskList: render\n    u ->>+ CreateTaskForm: User selects the "Create Task" button and fills out form\n    CreateTaskForm --\x3e> CreateTaskForm: addTask()\n    deactivate CreateTaskForm\n    PageDisplay ->> APIMiddleware: CREATE (HTTP) task\n    APIMiddleware --\x3e> PageDisplay: HTTP 200 Content-Type: JSON[] taskList\n    PageDisplay --\x3e> PageDisplay: rerender components\n    PageDisplay ->> TaskPage: render\n    TaskPage ->> TaskList: render'}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1. The user logs into their profile.\n2. User navigates to the \u201cCreate Task\u201d tab.\n3. User fills out a form with types of milestones and calendar information regarding due dates. These can be explicit calendar \n   entries based on a particular date, or recur on a regular time interval.\n4. The backend for the site builds a set of events for the avatar based on these milestones.\n")),(0,r.kt)("h2",{id:"use-case-5"},"Use Case 5"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As a user, I want to have my study app stay up to date on my progress towards my study goals.")),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    title Updating Task Progress\n    actor User as User\n    participant PageDisplay\n    participant TaskPage\n    participant TaskList\n    participant TaskItem\n    participant TaskDetails\n    participant APIMiddleware\n    \n    PageDisplay ->> PageDisplay: fetchData\n    PageDisplay ->> APIMiddleware: GET (HTTP) taskList\n    APIMiddleware --\x3e> PageDisplay: HTTP 200 Content-Type: JSON[] taskList\n    PageDisplay ->> TaskPage: render\n    TaskPage ->> TaskList: render\n\n    User->>TaskItem: User selects a task to view details\n    TaskItem->>TaskDetails: render\n\n    User ->>+ TaskDetails: User updates progress by indicating they're half-way through\n    TaskDetails ->> TaskDetails: updateTask()\n    deactivate TaskDetails\n\n    PageDisplay ->> APIMiddleware: UPDATE (HTTP) task, inventory\n    APIMiddleware--\x3e>+PageDisplay: HTTP 200 Content-Type: JSON[] taskList, JSON[] inventory\n    PageDisplay--\x3e>PageDisplay: rerender\n    \n    PageDisplay->>TaskPage: render\n    TaskPage->>TaskList: render\n    TaskList->>TaskItem: render\n    "}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1. The user logs into their profile.\n2. From the homepage, the user can select a specific task to see more information.\n3. After selecting a task, the user may update their progress by indicating they are halfway through, a quarter of the way through, etc.\n4. After progressing further towards completing a task, the user\u2019s pet will receive EXP in the form of candy towards its next level.\n")),(0,r.kt)("h2",{id:"use-case-6"},"Use Case 6"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As a user, I want to be able to track my pet\u2019s growth and my progress towards reaching my study goals.")),(0,r.kt)("mermaid",{value:"sequenceDiagram\ntitle Tracking Task Progress\n    actor u as User\n    participant Main\n    participant PageDisplay\n    participant PetProfPage\n    participant PPTaskList\n    participant PPTaskItem\n    participant PPTaskDetails\n    participant APIMiddleware\n    Main ->> Main: fetchData()\n    Main ->> APIMiddleware: GET (HTTP) avatarInfo\n    APIMiddleware --\x3e> Main: HTTP 200 Content-Type: JSON avatarInfo\n    Main ->> PageDisplay: render\n    PageDisplay ->> PageDisplay: fetchData\n    PageDisplay ->> APIMiddleware: GET (HTTP) taskList\n    APIMiddleware --\x3e> PageDisplay: HTTP 200 Content-Type: JSON[] taskList\n    u ->>+PetProfPage: User selects 'Pet Profile' page\n    PetProfPage ->>PPTaskList: render\n    PPTaskList ->>PPTaskItem: render\n    u ->>+ PPTaskItem: User selects a specific task under pet profile\n    PPTaskItem ->> PPTaskDetails: render\n    deactivate PetProfPage\n    deactivate PPTaskItem"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"This sequence diagram displays the way in which the user can use the Pet Profile page to see more information about their progress, as shown in Use Case 6. By\nselecting a task under the pet profile page, they can see their current progress towards completing it, as well as the time remaining before the deadline \n(whether it   be a self-set deadline, or one imposed by Canvas).\n1. The avatar information is retrieved through an API call.\n2. The page display component is rendered.\n3. The list of tasks is retrieved through an API call.\n4. The user selects 'Pet Profile' page, and selects a specific task to see more information.\n5. The pet profile page renders the task list, task item, and task details components.\n")),(0,r.kt)("h2",{id:"use-case-7"},"Use Case 7"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As a user, I want to be able to log into an account so that my progress and tasks will be saved.")),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    actor User\n    participant HomePage\n    participant LoginPage\n    participant APIMiddleware\n\n    User->>+LoginPage: User navigates to the login page and submits their credentials\n    LoginPage->>APIMiddleware: POST (HTTP) username, password\n    APIMiddleware--\x3e>LoginPage: HTTP 200 Content-Type: JSON[] refresh token, access token\n    LoginPage->>LoginPage: Set Auth. Tokens in Local Storage\n    LoginPage->>LoginPage: Set User State in application\n    LoginPage->>-User: User is logged in\n    User->>HomePage: User is redirected to the home page and has access to the applications"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1. The system requests the user to log in or create an account.\n2. The user enters their email address and password.\n3. The system validates the user\u2019s credentials and grants access to the application.\n")),(0,r.kt)("h2",{id:"use-case-8"},"Use Case 8"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As a user, it is important that I can create an account so that I can maintain my pet\u2019s growth and my task progress.")),(0,r.kt)("mermaid",{value:'\nsequenceDiagram\n\ntitle Tracking Task Progress\n### As a user, it is important that I can create an account so that I can maintain my pet\u2019s growth and my task progress.\n\n    actor u as User\n    participant a as App\n    participant pf as ProfileCreationView\n    participant ps as PetSelectionView\n    participant pc as PetSelectionCard\n    participant mp as Main\n    participant cv as CanvasIntegrationTab\n    participant api as APIMiddleware\n\n    u ->>+a: navigate to url ://\n    a ->>+pf: render(): route to profile creation page\n    pf ->> api: PUT (HTTP) Content-Type: JSON userObject\n    api --\x3e pf: HTTP 200\n    pf --\x3e-a: return profile created\n    a ->>+ps: render(): route to pet selection page\n    ps ->>+pc: render(): generate pet selection cards and present to user\n    u ->> pc: select pet\n    pc ->> api: PUT (HTTP) Content-Type: JSON {userid:petObject{}}\n    api --\x3e pc: HTTP 200\n    pc --\x3e-ps: return confirmed creation\n    ps --\x3e-a: return confirmed creation\n    a ->>+ mp: render()\n    mp ->> api: GET (HTTP) initialization routine for main page\n    api --\x3e mp: HTTP 200 Content-Type: JSON[] user total contents \n    mp ->>+cv: render(): canvas integration tab "on no tasks, canvas integration tab is the default"\n\n    deactivate mp\n    deactivate cv\n    deactivate a\n'}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1. Upon accessing the web application for the first time, the user is given the option to create an account.\n2. The user inputs their email address and creates a password to create their account.\n3. After creating the account, the user sees a page allowing them to choose a pet out of a selection of avatars.\n4. The user selects a pet.\n5. The site automatically navigates to the Canvas Integration tab.\n6. The user chooses whether to integrate with their Canvas account.\n7. The user now has access to creating tasks and growing their pet.\n")))}d.isMDXComponent=!0}}]);